# Generated from d:/232/PPL/ASSignments/ASS1/src/main/zcode/parser/ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,57,457,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,6,1,6,3,6,204,8,6,1,6,3,6,207,8,6,1,6,3,6,210,
        8,6,1,7,4,7,213,8,7,11,7,12,7,214,1,8,1,8,3,8,219,8,8,1,8,1,8,1,
        9,5,9,224,8,9,10,9,12,9,227,9,9,1,10,1,10,1,11,1,11,3,11,233,8,11,
        1,12,1,12,1,12,1,12,5,12,239,8,12,10,12,12,12,242,9,12,1,12,1,12,
        1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,
        1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,
        1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,
        1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,
        1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,
        1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,
        1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,36,
        1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,
        1,41,1,41,1,41,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,
        1,46,1,46,1,46,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,50,
        1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,
        1,56,5,56,416,8,56,10,56,12,56,419,9,56,1,57,4,57,422,8,57,11,57,
        12,57,423,1,57,1,57,1,58,3,58,429,8,58,1,58,1,58,1,59,1,59,1,59,
        1,59,5,59,437,8,59,10,59,12,59,440,9,59,1,59,3,59,443,8,59,1,59,
        1,59,3,59,447,8,59,1,59,1,59,1,60,1,60,1,60,1,61,1,61,1,62,1,62,
        0,0,63,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,0,17,0,19,0,21,0,23,8,25,
        9,27,0,29,0,31,10,33,11,35,12,37,13,39,14,41,15,43,16,45,17,47,18,
        49,19,51,20,53,21,55,22,57,23,59,24,61,25,63,26,65,27,67,28,69,29,
        71,30,73,31,75,32,77,33,79,34,81,35,83,36,85,37,87,38,89,39,91,40,
        93,41,95,42,97,43,99,44,101,45,103,46,105,47,107,48,109,49,111,50,
        113,51,115,52,117,53,119,54,121,55,123,56,125,57,1,0,11,1,0,48,57,
        2,0,69,69,101,101,2,0,43,43,45,45,1,0,46,46,1,0,34,34,1,0,10,10,
        7,0,39,39,92,92,98,98,102,102,110,110,114,114,116,116,3,0,65,90,
        95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,8,10,12,12,32,32,2,
        0,10,10,13,13,466,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
        0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
        0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
        0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
        0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,
        0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,
        0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,
        0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,
        1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,
        0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,1,127,1,
        0,0,0,3,140,1,0,0,0,5,153,1,0,0,0,7,164,1,0,0,0,9,175,1,0,0,0,11,
        188,1,0,0,0,13,201,1,0,0,0,15,212,1,0,0,0,17,216,1,0,0,0,19,225,
        1,0,0,0,21,228,1,0,0,0,23,232,1,0,0,0,25,234,1,0,0,0,27,246,1,0,
        0,0,29,249,1,0,0,0,31,252,1,0,0,0,33,257,1,0,0,0,35,263,1,0,0,0,
        37,270,1,0,0,0,39,275,1,0,0,0,41,282,1,0,0,0,43,289,1,0,0,0,45,293,
        1,0,0,0,47,301,1,0,0,0,49,306,1,0,0,0,51,310,1,0,0,0,53,316,1,0,
        0,0,55,319,1,0,0,0,57,325,1,0,0,0,59,334,1,0,0,0,61,337,1,0,0,0,
        63,342,1,0,0,0,65,347,1,0,0,0,67,353,1,0,0,0,69,357,1,0,0,0,71,359,
        1,0,0,0,73,361,1,0,0,0,75,363,1,0,0,0,77,365,1,0,0,0,79,367,1,0,
        0,0,81,371,1,0,0,0,83,375,1,0,0,0,85,378,1,0,0,0,87,380,1,0,0,0,
        89,383,1,0,0,0,91,386,1,0,0,0,93,388,1,0,0,0,95,391,1,0,0,0,97,393,
        1,0,0,0,99,396,1,0,0,0,101,400,1,0,0,0,103,403,1,0,0,0,105,405,1,
        0,0,0,107,407,1,0,0,0,109,409,1,0,0,0,111,411,1,0,0,0,113,413,1,
        0,0,0,115,421,1,0,0,0,117,428,1,0,0,0,119,432,1,0,0,0,121,450,1,
        0,0,0,123,453,1,0,0,0,125,455,1,0,0,0,127,128,5,114,0,0,128,129,
        5,101,0,0,129,130,5,97,0,0,130,131,5,100,0,0,131,132,5,78,0,0,132,
        133,5,117,0,0,133,134,5,109,0,0,134,135,5,98,0,0,135,136,5,101,0,
        0,136,137,5,114,0,0,137,138,5,40,0,0,138,139,5,41,0,0,139,2,1,0,
        0,0,140,141,5,119,0,0,141,142,5,114,0,0,142,143,5,105,0,0,143,144,
        5,116,0,0,144,145,5,101,0,0,145,146,5,78,0,0,146,147,5,117,0,0,147,
        148,5,109,0,0,148,149,5,98,0,0,149,150,5,101,0,0,150,151,5,114,0,
        0,151,152,5,40,0,0,152,4,1,0,0,0,153,154,5,114,0,0,154,155,5,101,
        0,0,155,156,5,97,0,0,156,157,5,100,0,0,157,158,5,66,0,0,158,159,
        5,111,0,0,159,160,5,111,0,0,160,161,5,108,0,0,161,162,5,40,0,0,162,
        163,5,41,0,0,163,6,1,0,0,0,164,165,5,119,0,0,165,166,5,114,0,0,166,
        167,5,105,0,0,167,168,5,116,0,0,168,169,5,101,0,0,169,170,5,66,0,
        0,170,171,5,111,0,0,171,172,5,111,0,0,172,173,5,108,0,0,173,174,
        5,40,0,0,174,8,1,0,0,0,175,176,5,114,0,0,176,177,5,101,0,0,177,178,
        5,97,0,0,178,179,5,100,0,0,179,180,5,83,0,0,180,181,5,116,0,0,181,
        182,5,114,0,0,182,183,5,105,0,0,183,184,5,110,0,0,184,185,5,103,
        0,0,185,186,5,40,0,0,186,187,5,41,0,0,187,10,1,0,0,0,188,189,5,119,
        0,0,189,190,5,114,0,0,190,191,5,105,0,0,191,192,5,116,0,0,192,193,
        5,101,0,0,193,194,5,83,0,0,194,195,5,116,0,0,195,196,5,114,0,0,196,
        197,5,105,0,0,197,198,5,110,0,0,198,199,5,103,0,0,199,200,5,40,0,
        0,200,12,1,0,0,0,201,203,3,15,7,0,202,204,3,21,10,0,203,202,1,0,
        0,0,203,204,1,0,0,0,204,206,1,0,0,0,205,207,3,19,9,0,206,205,1,0,
        0,0,206,207,1,0,0,0,207,209,1,0,0,0,208,210,3,17,8,0,209,208,1,0,
        0,0,209,210,1,0,0,0,210,14,1,0,0,0,211,213,7,0,0,0,212,211,1,0,0,
        0,213,214,1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,16,1,0,0,0,
        216,218,7,1,0,0,217,219,7,2,0,0,218,217,1,0,0,0,218,219,1,0,0,0,
        219,220,1,0,0,0,220,221,3,19,9,0,221,18,1,0,0,0,222,224,7,0,0,0,
        223,222,1,0,0,0,224,227,1,0,0,0,225,223,1,0,0,0,225,226,1,0,0,0,
        226,20,1,0,0,0,227,225,1,0,0,0,228,229,7,3,0,0,229,22,1,0,0,0,230,
        233,3,31,15,0,231,233,3,33,16,0,232,230,1,0,0,0,232,231,1,0,0,0,
        233,24,1,0,0,0,234,240,7,4,0,0,235,239,8,5,0,0,236,239,3,27,13,0,
        237,239,3,29,14,0,238,235,1,0,0,0,238,236,1,0,0,0,238,237,1,0,0,
        0,239,242,1,0,0,0,240,238,1,0,0,0,240,241,1,0,0,0,241,243,1,0,0,
        0,242,240,1,0,0,0,243,244,7,4,0,0,244,245,6,12,0,0,245,26,1,0,0,
        0,246,247,5,92,0,0,247,248,7,6,0,0,248,28,1,0,0,0,249,250,5,39,0,
        0,250,251,7,4,0,0,251,30,1,0,0,0,252,253,5,116,0,0,253,254,5,114,
        0,0,254,255,5,117,0,0,255,256,5,101,0,0,256,32,1,0,0,0,257,258,5,
        102,0,0,258,259,5,97,0,0,259,260,5,108,0,0,260,261,5,115,0,0,261,
        262,5,101,0,0,262,34,1,0,0,0,263,264,5,110,0,0,264,265,5,117,0,0,
        265,266,5,109,0,0,266,267,5,98,0,0,267,268,5,101,0,0,268,269,5,114,
        0,0,269,36,1,0,0,0,270,271,5,98,0,0,271,272,5,111,0,0,272,273,5,
        111,0,0,273,274,5,108,0,0,274,38,1,0,0,0,275,276,5,115,0,0,276,277,
        5,116,0,0,277,278,5,114,0,0,278,279,5,105,0,0,279,280,5,110,0,0,
        280,281,5,103,0,0,281,40,1,0,0,0,282,283,5,114,0,0,283,284,5,101,
        0,0,284,285,5,116,0,0,285,286,5,117,0,0,286,287,5,114,0,0,287,288,
        5,110,0,0,288,42,1,0,0,0,289,290,5,118,0,0,290,291,5,97,0,0,291,
        292,5,114,0,0,292,44,1,0,0,0,293,294,5,100,0,0,294,295,5,121,0,0,
        295,296,5,110,0,0,296,297,5,97,0,0,297,298,5,109,0,0,298,299,5,105,
        0,0,299,300,5,99,0,0,300,46,1,0,0,0,301,302,5,102,0,0,302,303,5,
        117,0,0,303,304,5,110,0,0,304,305,5,99,0,0,305,48,1,0,0,0,306,307,
        5,102,0,0,307,308,5,111,0,0,308,309,5,114,0,0,309,50,1,0,0,0,310,
        311,5,117,0,0,311,312,5,110,0,0,312,313,5,116,0,0,313,314,5,105,
        0,0,314,315,5,108,0,0,315,52,1,0,0,0,316,317,5,98,0,0,317,318,5,
        121,0,0,318,54,1,0,0,0,319,320,5,98,0,0,320,321,5,114,0,0,321,322,
        5,101,0,0,322,323,5,97,0,0,323,324,5,107,0,0,324,56,1,0,0,0,325,
        326,5,99,0,0,326,327,5,111,0,0,327,328,5,110,0,0,328,329,5,116,0,
        0,329,330,5,105,0,0,330,331,5,110,0,0,331,332,5,117,0,0,332,333,
        5,101,0,0,333,58,1,0,0,0,334,335,5,105,0,0,335,336,5,102,0,0,336,
        60,1,0,0,0,337,338,5,101,0,0,338,339,5,108,0,0,339,340,5,115,0,0,
        340,341,5,101,0,0,341,62,1,0,0,0,342,343,5,101,0,0,343,344,5,108,
        0,0,344,345,5,105,0,0,345,346,5,102,0,0,346,64,1,0,0,0,347,348,5,
        98,0,0,348,349,5,101,0,0,349,350,5,103,0,0,350,351,5,105,0,0,351,
        352,5,110,0,0,352,66,1,0,0,0,353,354,5,101,0,0,354,355,5,110,0,0,
        355,356,5,100,0,0,356,68,1,0,0,0,357,358,5,43,0,0,358,70,1,0,0,0,
        359,360,5,45,0,0,360,72,1,0,0,0,361,362,5,42,0,0,362,74,1,0,0,0,
        363,364,5,47,0,0,364,76,1,0,0,0,365,366,5,37,0,0,366,78,1,0,0,0,
        367,368,5,110,0,0,368,369,5,111,0,0,369,370,5,116,0,0,370,80,1,0,
        0,0,371,372,5,97,0,0,372,373,5,110,0,0,373,374,5,100,0,0,374,82,
        1,0,0,0,375,376,5,111,0,0,376,377,5,114,0,0,377,84,1,0,0,0,378,379,
        5,61,0,0,379,86,1,0,0,0,380,381,5,60,0,0,381,382,5,45,0,0,382,88,
        1,0,0,0,383,384,5,33,0,0,384,385,5,61,0,0,385,90,1,0,0,0,386,387,
        5,60,0,0,387,92,1,0,0,0,388,389,5,60,0,0,389,390,5,61,0,0,390,94,
        1,0,0,0,391,392,5,62,0,0,392,96,1,0,0,0,393,394,5,62,0,0,394,395,
        5,61,0,0,395,98,1,0,0,0,396,397,5,46,0,0,397,398,5,46,0,0,398,399,
        5,46,0,0,399,100,1,0,0,0,400,401,5,61,0,0,401,402,5,61,0,0,402,102,
        1,0,0,0,403,404,5,44,0,0,404,104,1,0,0,0,405,406,5,40,0,0,406,106,
        1,0,0,0,407,408,5,41,0,0,408,108,1,0,0,0,409,410,5,91,0,0,410,110,
        1,0,0,0,411,412,5,93,0,0,412,112,1,0,0,0,413,417,7,7,0,0,414,416,
        7,8,0,0,415,414,1,0,0,0,416,419,1,0,0,0,417,415,1,0,0,0,417,418,
        1,0,0,0,418,114,1,0,0,0,419,417,1,0,0,0,420,422,7,9,0,0,421,420,
        1,0,0,0,422,423,1,0,0,0,423,421,1,0,0,0,423,424,1,0,0,0,424,425,
        1,0,0,0,425,426,6,57,1,0,426,116,1,0,0,0,427,429,5,13,0,0,428,427,
        1,0,0,0,428,429,1,0,0,0,429,430,1,0,0,0,430,431,5,10,0,0,431,118,
        1,0,0,0,432,433,5,35,0,0,433,434,5,35,0,0,434,438,1,0,0,0,435,437,
        8,10,0,0,436,435,1,0,0,0,437,440,1,0,0,0,438,436,1,0,0,0,438,439,
        1,0,0,0,439,446,1,0,0,0,440,438,1,0,0,0,441,443,5,13,0,0,442,441,
        1,0,0,0,442,443,1,0,0,0,443,444,1,0,0,0,444,447,5,10,0,0,445,447,
        5,0,0,1,446,442,1,0,0,0,446,445,1,0,0,0,447,448,1,0,0,0,448,449,
        6,59,1,0,449,120,1,0,0,0,450,451,9,0,0,0,451,452,6,60,2,0,452,122,
        1,0,0,0,453,454,9,0,0,0,454,124,1,0,0,0,455,456,9,0,0,0,456,126,
        1,0,0,0,16,0,203,206,209,214,218,225,232,238,240,417,423,428,438,
        442,446,3,1,12,0,6,0,0,1,60,1
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    NUMBER_LITERAL = 7
    BOOL_LITERAL = 8
    STRING_LITERAL = 9
    TRUE = 10
    FALSE = 11
    NUMBER = 12
    BOOL = 13
    STRING = 14
    RETURN = 15
    VAR = 16
    DYNAMIC = 17
    FUNC = 18
    FOR = 19
    UNTIL = 20
    BY = 21
    BREAK = 22
    CONTINUE = 23
    IF = 24
    ELSE = 25
    ELIF = 26
    BEGIN = 27
    END = 28
    PLUS = 29
    MINUS = 30
    MULTIPLY = 31
    DIVIDE = 32
    MODULO = 33
    NOT = 34
    AND = 35
    OR = 36
    ASSIGN = 37
    ARROW = 38
    NOT_EQUAL = 39
    LESS_THAN = 40
    LESS_THAN_OR_EQUAL = 41
    GREATER_THAN = 42
    GREATER_THAN_OR_EQUAL = 43
    ELLIPSIS = 44
    EQUAL = 45
    COMMA = 46
    LPAREN = 47
    RPAREN = 48
    LBRACKET = 49
    RBRACKET = 50
    IDENTIFIER = 51
    WS = 52
    NEWLINE = 53
    COMMENT = 54
    ERROR_CHAR = 55
    UNCLOSE_STRING = 56
    ILLEGAL_ESCAPE = 57

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'readNumber()'", "'writeNumber('", "'readBool()'", "'writeBool('", 
            "'readString()'", "'writeString('", "'true'", "'false'", "'number'", 
            "'bool'", "'string'", "'return'", "'var'", "'dynamic'", "'func'", 
            "'for'", "'until'", "'by'", "'break'", "'continue'", "'if'", 
            "'else'", "'elif'", "'begin'", "'end'", "'+'", "'-'", "'*'", 
            "'/'", "'%'", "'not'", "'and'", "'or'", "'='", "'<-'", "'!='", 
            "'<'", "'<='", "'>'", "'>='", "'...'", "'=='", "','", "'('", 
            "')'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "NUMBER_LITERAL", "BOOL_LITERAL", "STRING_LITERAL", "TRUE", 
            "FALSE", "NUMBER", "BOOL", "STRING", "RETURN", "VAR", "DYNAMIC", 
            "FUNC", "FOR", "UNTIL", "BY", "BREAK", "CONTINUE", "IF", "ELSE", 
            "ELIF", "BEGIN", "END", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", 
            "MODULO", "NOT", "AND", "OR", "ASSIGN", "ARROW", "NOT_EQUAL", 
            "LESS_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN", "GREATER_THAN_OR_EQUAL", 
            "ELLIPSIS", "EQUAL", "COMMA", "LPAREN", "RPAREN", "LBRACKET", 
            "RBRACKET", "IDENTIFIER", "WS", "NEWLINE", "COMMENT", "ERROR_CHAR", 
            "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "NUMBER_LITERAL", 
                  "INT", "EXP_PART", "INT_PART", "DOT", "BOOL_LITERAL", 
                  "STRING_LITERAL", "ESCAPE_SEQUENCE", "DOUBQ", "TRUE", 
                  "FALSE", "NUMBER", "BOOL", "STRING", "RETURN", "VAR", 
                  "DYNAMIC", "FUNC", "FOR", "UNTIL", "BY", "BREAK", "CONTINUE", 
                  "IF", "ELSE", "ELIF", "BEGIN", "END", "PLUS", "MINUS", 
                  "MULTIPLY", "DIVIDE", "MODULO", "NOT", "AND", "OR", "ASSIGN", 
                  "ARROW", "NOT_EQUAL", "LESS_THAN", "LESS_THAN_OR_EQUAL", 
                  "GREATER_THAN", "GREATER_THAN_OR_EQUAL", "ELLIPSIS", "EQUAL", 
                  "COMMA", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "IDENTIFIER", 
                  "WS", "NEWLINE", "COMMENT", "ERROR_CHAR", "UNCLOSE_STRING", 
                  "ILLEGAL_ESCAPE" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[12] = self.STRING_LITERAL_action 
            actions[60] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRING_LITERAL_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            content = str(self.text)
            self.text = content[1:-1]
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            raise ErrorToken(self.text)
     


